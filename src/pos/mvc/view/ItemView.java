/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pos.mvc.view;

import java.awt.HeadlessException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import pos.mvc.controller.ItemController;
import pos.mvc.model.CustomerModel;
import pos.mvc.model.Item;

/**
 *
 * @author Damith
 */
public class ItemView extends javax.swing.JFrame {

    ItemController itemController;

    /**
     * Creates new form ItemView
     */
    public ItemView() {
        this.itemController = new ItemController();
        initComponents();
        loadAllItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        itemBaseForm = new javax.swing.JPanel();
        itemHeaderTitle = new javax.swing.JPanel();
        itemHeaderLabel = new javax.swing.JLabel();
        formFieldPanel = new javax.swing.JPanel();
        qtyOnHandLabel = new javax.swing.JLabel();
        packSizeField = new javax.swing.JTextField();
        packSizeLabel = new javax.swing.JLabel();
        itemDescriptionField = new javax.swing.JTextField();
        itemCodeField2 = new javax.swing.JTextField();
        itemCodeLabel1 = new javax.swing.JLabel();
        unitPriceField = new javax.swing.JTextField();
        unitPriceLabel = new javax.swing.JLabel();
        qtyOnHandInput1 = new javax.swing.JTextField();
        itemDescriptionLabel = new javax.swing.JLabel();
        deleteItemButton = new javax.swing.JButton();
        updateItemButton = new javax.swing.JButton();
        saveItemButton = new javax.swing.JButton();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemDataTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        itemHeaderTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        itemHeaderLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        itemHeaderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        itemHeaderLabel.setText("Manage Item");

        javax.swing.GroupLayout itemHeaderTitleLayout = new javax.swing.GroupLayout(itemHeaderTitle);
        itemHeaderTitle.setLayout(itemHeaderTitleLayout);
        itemHeaderTitleLayout.setHorizontalGroup(
            itemHeaderTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemHeaderTitleLayout.createSequentialGroup()
                .addComponent(itemHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        itemHeaderTitleLayout.setVerticalGroup(
            itemHeaderTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemHeaderTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemHeaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        qtyOnHandLabel.setText("Qty On Hand");

        packSizeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packSizeFieldActionPerformed(evt);
            }
        });

        packSizeLabel.setText("Pack Size");

        itemDescriptionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDescriptionFieldActionPerformed(evt);
            }
        });

        itemCodeField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCodeField2ActionPerformed(evt);
            }
        });

        itemCodeLabel1.setText("Item Code");

        unitPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitPriceFieldActionPerformed(evt);
            }
        });

        unitPriceLabel.setText("Unit Price");

        qtyOnHandInput1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyOnHandInput1ActionPerformed(evt);
            }
        });

        itemDescriptionLabel.setText("Description");

        deleteItemButton.setText("Delete Item");
        deleteItemButton.setActionCommand("Delete Item");
        deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemButtonActionPerformed(evt);
            }
        });

        updateItemButton.setText("Update Item");
        updateItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateItemButtonActionPerformed(evt);
            }
        });

        saveItemButton.setText("Save Item");
        saveItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemButtonActionPerformed(evt);
            }
        });

        itemDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        itemDataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemDataTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(itemDataTable);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111))
        );

        javax.swing.GroupLayout formFieldPanelLayout = new javax.swing.GroupLayout(formFieldPanel);
        formFieldPanel.setLayout(formFieldPanelLayout);
        formFieldPanelLayout.setHorizontalGroup(
            formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formFieldPanelLayout.createSequentialGroup()
                .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(formFieldPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, formFieldPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(qtyOnHandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(itemDescriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(itemCodeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(formFieldPanelLayout.createSequentialGroup()
                                .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemCodeField2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(qtyOnHandInput1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(unitPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(packSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(unitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(packSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(itemDescriptionField))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formFieldPanelLayout.createSequentialGroup()
                .addContainerGap(484, Short.MAX_VALUE)
                .addComponent(deleteItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveItemButton)
                .addGap(158, 158, 158))
        );
        formFieldPanelLayout.setVerticalGroup(
            formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formFieldPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(packSizeField)
                    .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(packSizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(itemCodeField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(itemCodeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qtyOnHandLabel)
                    .addComponent(unitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(qtyOnHandInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemDescriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemDescriptionLabel))
                .addGap(18, 18, 18)
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(formFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteItemButton)
                    .addComponent(updateItemButton)
                    .addComponent(saveItemButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout itemBaseFormLayout = new javax.swing.GroupLayout(itemBaseForm);
        itemBaseForm.setLayout(itemBaseFormLayout);
        itemBaseFormLayout.setHorizontalGroup(
            itemBaseFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemBaseFormLayout.createSequentialGroup()
                .addComponent(itemHeaderTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemBaseFormLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(formFieldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        itemBaseFormLayout.setVerticalGroup(
            itemBaseFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemBaseFormLayout.createSequentialGroup()
                .addComponent(itemHeaderTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formFieldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(371, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemBaseForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemBaseForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void packSizeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packSizeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_packSizeFieldActionPerformed

    private void itemDescriptionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDescriptionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemDescriptionFieldActionPerformed

    private void itemCodeField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCodeField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemCodeField2ActionPerformed

    private void unitPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitPriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unitPriceFieldActionPerformed

    private void qtyOnHandInput1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyOnHandInput1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyOnHandInput1ActionPerformed

    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
        this.deleteItem();
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    private void saveItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemButtonActionPerformed
        this.saveItemData();
    }//GEN-LAST:event_saveItemButtonActionPerformed

    private void updateItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateItemButtonActionPerformed
        this.updateItem();
    }//GEN-LAST:event_updateItemButtonActionPerformed

    private void itemDataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemDataTableMouseClicked
        this.searchItem();
    }//GEN-LAST:event_itemDataTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JPanel formFieldPanel;
    private javax.swing.JPanel itemBaseForm;
    private javax.swing.JTextField itemCodeField2;
    private javax.swing.JLabel itemCodeLabel1;
    private javax.swing.JTable itemDataTable;
    private javax.swing.JTextField itemDescriptionField;
    private javax.swing.JLabel itemDescriptionLabel;
    private javax.swing.JLabel itemHeaderLabel;
    private javax.swing.JPanel itemHeaderTitle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField packSizeField;
    private javax.swing.JLabel packSizeLabel;
    private javax.swing.JTextField qtyOnHandInput1;
    private javax.swing.JLabel qtyOnHandLabel;
    private javax.swing.JButton saveItemButton;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JTextField unitPriceField;
    private javax.swing.JLabel unitPriceLabel;
    private javax.swing.JButton updateItemButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Save the data of a new item
     */
    private void saveItemData() {
        // Create a new Item object using the data from input fields
        Item item = new Item(
                itemCodeField2.getText(),
                itemDescriptionField.getText(),
                packSizeField.getText(),
                Double.parseDouble(unitPriceField.getText()),
                Integer.parseInt(qtyOnHandInput1.getText())
        );

        try {
            // Save the item data through the itemController
            String resp = itemController.saveItem(item);

            // Clear input fields, reload all items, and show a message
            clear();
            loadAllItems();
            JOptionPane.showMessageDialog(this, resp);
        } catch (Exception e) {
            // Handle exceptions gracefully
        }
    }

    /**
     * Clear the data in the item form
     */
    private void clear() {
        itemCodeField2.setText("");
        itemDescriptionField.setText("");
        packSizeField.setText("");
        unitPriceField.setText("");
        qtyOnHandInput1.setText("");
    }

    /**
     * Load all existing items and populate the table
     */
    private void loadAllItems() {
        try {
            // Define table columns
            String[] columns = {"Item Code", "Description", "Pack Size", "Unit Price", "QTY On Hand"};

            // Create a DefaultTableModel and set it to the itemDataTable
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            itemDataTable.setModel(dtm);

            // Retrieve items from the itemController and populate the table
            ArrayList<Item> items = itemController.getAllItems();

            for (Item item : items) {
                Object[] rowData = {item.getItemCode(), item.getDescription(), item.getPackSize(), item.getUnitPrice(), item.getQtyOnHand()};
                dtm.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ItemView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    /**
     * Search for an item and populate the form fields with its data
     */
    private void searchItem() {
        try {
            // Get the selected item's code from the table
            String itemCode = itemDataTable.getValueAt(itemDataTable.getSelectedRow(), 0).toString();
            Item item = itemController.getItemByItemCode(itemCode);

            if (item != null) {
                // Populate form fields with the found item's data
                itemCodeField2.setText(item.getItemCode());
                itemDescriptionField.setText(item.getDescription());
                packSizeField.setText(item.getPackSize());
                unitPriceField.setText(Double.toString(item.getUnitPrice()));
                qtyOnHandInput1.setText(Integer.toString(item.getQtyOnHand()));
            } else {
                JOptionPane.showMessageDialog(this, "Item Not Found");
            }

        } catch (SQLException ex) {
            Logger.getLogger(ItemView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    /**
     * Update an existing item's data
     */
    private void updateItem() {
        try {
            // Create a new Item object using updated data
            Item item = new Item(
                    itemCodeField2.getText(),
                    itemDescriptionField.getText(),
                    packSizeField.getText(),
                    Double.parseDouble(unitPriceField.getText()),
                    Integer.parseInt(qtyOnHandInput1.getText())
            );

            // Update the item data through the itemController
            String resp = itemController.updateItem(item);

            // Clear input fields, reload all items, and show a message
            clear();
            loadAllItems();
            JOptionPane.showMessageDialog(this, resp);
        } catch (HeadlessException | SQLException e) {
            // Handle exceptions gracefully
        }
    }

    /**
     * Delete an existing item
     */
    private void deleteItem() {
        try {
            // Get the selected item's code from the table
            String itemCode = itemDataTable.getValueAt(itemDataTable.getSelectedRow(), 0).toString();

            // Delete the item through the itemController
            String resp = itemController.deleteItem(itemCode);

            // Clear input fields, reload all items, and show a message
            clear();
            loadAllItems();
            JOptionPane.showMessageDialog(this, resp);
        } catch (SQLException ex) {
            Logger.getLogger(ItemView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

}
